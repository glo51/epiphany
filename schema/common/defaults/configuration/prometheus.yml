---
kind: configuration/prometheus
title: "Prometheus"
name: default
specification:
  config_directory: "/etc/prometheus"
  storage:
    data_directory: "/var/lib/prometheus"
  config_flags:                                                            # Parameters that Prometheus service will be started with.
    - "--config.file=/etc/prometheus/prometheus.yml"                       # Directory should be the same as "config_directory"
    - "--storage.tsdb.path=/var/lib/prometheus"                            # Directory should be the same as "storage.data_directory"
    - "--storage.tsdb.retention.time=180d"                                 # Data retention time for metrics
    - "--storage.tsdb.retention.size=20GB"                                 # Data retention size for metrics
    - "--web.console.libraries=/etc/prometheus/console_libraries"          # Directory should be the same as "config_directory"
    - "--web.console.templates=/etc/prometheus/consoles"                   # Directory should be the same as "config_directory"
    - "--web.listen-address=0.0.0.0:9090"                                  # Address that Prometheus console will be available
    - "--web.enable-admin-api"                                             # Enables administrative HTTP API
  metrics_path: "/metrics"
  scrape_interval : "15s"
  scrape_timeout: "10s"
  evaluation_interval: "10s"
  remote_write: []
  remote_read: []
  blackbox_exporter_targets:
    - <INPUT_PROMETHEUS_BLACKBOX_TARGET>
  alertmanager:
    enable: true # To make Alertmanager working, you have to enable it and define receivers and routes
    alert_rules:
      Certificates: true
      Container: true
      DiskSpacePrediction: true
      Kafka: true
      KafkaConsumerLag: true
      Node: true
      PostgreSQL: true
      Probe: true
      Prometheus: true
    # Configuration for Alertmanager, it will be passed to Alertmanager service.
    config: |-
      {% raw -%}
      # Full list of configuration fields: https://prometheus.io/docs/alerting/configuration/
      global:
        resolve_timeout: 5m

      route:
        group_by: ['alertname', 'job', 'instance', 'consumergroup', 'partition', 'datname', 'severity']
        group_wait: 10s
        group_interval: 10s
        repeat_interval: 1h
        receiver: 'opsgenie'

        routes:
        - receiver: 'null' # set to 'null' to disable alerts

      receivers:
      - name: 'null'
      - name: 'opsgenie'
        opsgenie_configs:
          - api_key: <INPUT_ALERTMANAGER_OPSGENIE_API_KEY>
            message: '{{ template "opsgenie.message" . }}'
            description: '{{ template "opsgenie.description" . }}'
            priority: '{{ if eq .GroupLabels.severity "critical" }}P1{{ else if eq .GroupLabels.severity "high" }}P2{{ else if eq .GroupLabels.severity "moderate" }}P3{{ else if eq .GroupLabels.severity "low" }}P4{{ else if eq .GroupLabels.severity "informational" }}P5{{ else }}P5{{ end }}'
            source: '{{template "opsgenie.source" .}}'
            details: { msgkey: '{{ if .GroupLabels.consumergroup }}{{template "opsgenie.msgkeywithoutNode" .}}{{ else }}{{template "opsgenie.msgkeywithNode" .}}{{ end }}{{template "opsgenie.message" .}}' , reference: '{{template "opsgenie.reference" .}}' }

      templates:
      - 'opsgenie.tmpl'
      {% endraw -%}
